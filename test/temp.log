Run options: -n test_http

# Running tests:

c:/jruby-1.7.3/lib/ruby/1.9/tracer.rb:139 warning: tracing (e.g. set_trace_func) will not capture all events without --debug flag
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/http_proxy.rb:9:HttpProxy:-: 		@http=Http::Parser.new
#0:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/http_parser-0.1.3/lib/http/native_parser.rb:77:Http::NativeParser:-:       @method = nil
#0:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/http_parser-0.1.3/lib/http/native_parser.rb:78:Http::NativeParser:-:       @path = nil
#0:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/http_parser-0.1.3/lib/http/native_parser.rb:79:Http::NativeParser:-:       @version = nil
#0:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/http_parser-0.1.3/lib/http/native_parser.rb:80:Http::NativeParser:-:       @headers = {}
#0:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/http_parser-0.1.3/lib/http/native_parser.rb:81:Http::NativeParser:-:       @body = nil
#0:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/http_parser-0.1.3/lib/http/native_parser.rb:82:Http::NativeParser:-:       @state = :request_line
#0:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/http_parser-0.1.3/lib/http/native_parser.rb:83:Http::NativeParser:-:       @options = DefaultOptions.merge(options)
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/http_proxy.rb:10:HttpProxy:-: 		super(config)
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:43:ProxyServer:-: 		@config=config
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:44:ProxyServer:-: 		@thread=nil
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:45:ProxyServer:-: 		@proxy=nil
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:46:ProxyServer:-: 		@stub=nil
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:47:ProxyServer:-: 		@mocks=[]
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:48:ProxyServer:-:     @request=ProxyRequest.new
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:25:ProxyRequest:-:     @data=''
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:26:ProxyRequest:-:     @raw=''
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:49:ProxyServer:-:     @response=ProxyResponse.new
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:34:ProxyResponse:-:     @data=''
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:35:ProxyResponse:-:     @raw=''
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:50:ProxyServer:-: 		@raw_req=nil
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:51:ProxyServer:-: 		@raw_res=nil
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:126:ProxyServer:-: 		server=self
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:127:ProxyServer:-: 		begin
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:129:ProxyServer:-: 			@thread=Thread.new do
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:138:ProxyServer:-: 		puts "#{self} server start on port #{@config['port']}"
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:130:ProxyServer:-: 				proxy_start(:host=>@config['host'], :port=>@config['port'], :debug=>debug) do |conn|
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:138:ProxyServer:-: 		puts "#{self} server start on port #{@config['port']}"
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:156:ProxyServer:-: 		EM.run do
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:138:ProxyServer:-: 		puts "#{self} server start on port #{@config['port']}"
#<HttpProxy:0xfe9ad1> server start on port 8078#1:
c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:159:#<Class:EventMachine>:-:     if reactor_running? and @reactor_pid != Process.pid
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/test/test_helpper.rb:8:Object:-: 	uri = URI(url)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1184:#<Class:EventMachine>:-:     (@reactor_running || false)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:991:Kernel:-:     if uri.is_a?(URI::Generic)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:167:#<Class:EventMachine>:-:     tail and @tails.unshift(tail)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:994:Kernel:-:       URI.parse(uri)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:169:#<Class:EventMachine>:-:     if reactor_running?
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:747:#<Class:URI>:-:     DEFAULT_PARSER.parse(uri)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1184:#<Class:EventMachine>:-:     (@reactor_running || false)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:210:URI::Parser:-:       scheme, userinfo, host, port,
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:172:#<Class:EventMachine>:-:       @conns = {}
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:121:URI::Parser:-:       case uri
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:173:#<Class:EventMachine>:-:       @acceptors = {}
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:122:URI::Parser:-:       when ''
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:174:#<Class:EventMachine>:-:       @timers = {}
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:125:URI::Parser:-:       when @regexp[:ABS_URI]
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:175:#<Class:EventMachine>:-:       @wrapped_exception = nil
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:176:#<Class:EventMachine>:-:       @next_tick_queue ||= []
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:177:#<Class:EventMachine>:-:       @tails ||= []
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:178:#<Class:EventMachine>:-:       begin
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:179:#<Class:EventMachine>:-:         @reactor_pid = Process.pid
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:126:URI::Parser:-:         scheme, opaque, userinfo, host, port,
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:180:#<Class:EventMachine>:-:         @reactor_running = true
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:141:URI::Parser:-:         if !scheme
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:181:#<Class:EventMachine>:-:         initialize_event_machine
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:145:URI::Parser:-:         if !opaque && (!path && (!host && !registry))
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:102:#<Class:EventMachine>:-:     @em = JEM.new
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:145:URI::Parser:-:         if !opaque && (!path && (!host && !registry))
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:179:URI::Parser:-:       path = '' if !path && !opaque # (see RFC2396 Section 5.2)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:180:URI::Parser:-:       ret = [
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:189:URI::Parser:-:       return ret
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:213:URI::Parser:-:       if scheme && URI.scheme_list.include?(scheme.upcase)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:660:#<Class:URI>:-:     @@schemes
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:214:URI::Parser:-:         URI.scheme_list[scheme.upcase].new(scheme, userinfo, host, port,
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/common.rb:660:#<Class:URI>:-:     @@schemes
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/http.rb:84:URI::HTTP:-:       super(*arg)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:179:URI::Generic:-:       @scheme = nil
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:182:#<Class:EventMachine>:-:         (b = blk || block) and add_timer(0, b)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:180:URI::Generic:-:       @user = nil
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:182:#<Class:EventMachine>:-:         (b = blk || block) and add_timer(0, b)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:181:URI::Generic:-:       @password = nil
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:319:#<Class:EventMachine>:-:     interval = args.shift
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:182:URI::Generic:-:       @host = nil
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:320:#<Class:EventMachine>:-:     code = args.shift || block
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:183:URI::Generic:-:       @port = nil
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:321:#<Class:EventMachine>:-:     if code
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:184:URI::Generic:-:       @path = nil
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:323:#<Class:EventMachine>:-:       s = add_oneshot_timer((interval.to_f * 1000).to_i)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:185:URI::Generic:-:       @query = nil
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:323:#<Class:EventMachine>:-:       s = add_oneshot_timer((interval.to_f * 1000).to_i)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:186:URI::Generic:-:       @opaque = nil
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:108:#<Class:EventMachine>:-:     @em.installOneshotTimer interval
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:187:URI::Generic:-:       @registry = nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:188:URI::Generic:-:       @fragment = nil
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:324:#<Class:EventMachine>:-:       @timers[s] = code
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:189:URI::Generic:-:       @parser = parser == DEFAULT_PARSER ? nil : parser
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:325:#<Class:EventMachine>:-:       s
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:191:URI::Generic:-:       if arg_check
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:183:#<Class:EventMachine>:-:         if @next_tick_queue && !@next_tick_queue.empty?
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:202:URI::Generic:-:         self.set_scheme(scheme)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:186:#<Class:EventMachine>:-:         @reactor_thread = Thread.current
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:342:URI::Generic:-:       @scheme = v
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:187:#<Class:EventMachine>:-:         run_machine
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:203:URI::Generic:-:         self.set_userinfo(userinfo)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:111:#<Class:EventMachine>:-:     @em.run
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:523:URI::Generic:-:       unless password
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:524:URI::Generic:-:         user, password = split_userinfo(user)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:556:URI::Generic:-:       return nil, nil unless ui
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:526:URI::Generic:-:       @user     = user
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:527:URI::Generic:-:       @password = password if password
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:529:URI::Generic:-:       [@user, @password]
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:204:URI::Generic:-:         self.set_host(host)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:617:URI::Generic:-:       @host = v
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:205:URI::Generic:-:         self.set_port(port)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:709:URI::Generic:-:       unless !v || v.kind_of?(Fixnum)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:716:URI::Generic:-:       @port = v
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:206:URI::Generic:-:         self.set_path(path)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:842:URI::Generic:-:       @path = v
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:207:URI::Generic:-:         self.set_query(query)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:907:URI::Generic:-:       @query = v
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:208:URI::Generic:-:         self.set_opaque(opaque)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:970:URI::Generic:-:       @opaque = v
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:209:URI::Generic:-:         self.set_registry(registry)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:779:URI::Generic:-:       @registry = v
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:210:URI::Generic:-:         self.set_fragment(fragment)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:1013:URI::Generic:-:       @fragment = v
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:212:URI::Generic:-:       if @registry && !self.class.use_registry
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:217:URI::Generic:-:       @scheme.freeze if @scheme
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:218:URI::Generic:-:       self.set_path('') if !@path && !@opaque # (see RFC2396 Section 5.2)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:219:URI::Generic:-:       self.set_port(self.default_port) if self.default_port && !@port
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:37:URI::Generic:-:       self.class.default_port
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:30:#<Class:URI::Generic>:-:       self::DEFAULT_PORT
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:37:URI::Generic:-:       self.class.default_port
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:30:#<Class:URI::Generic>:-:       self::DEFAULT_PORT
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:709:URI::Generic:-:       unless !v || v.kind_of?(Fixnum)
#0:c:/jruby-1.7.3/lib/ruby/1.9/uri/generic.rb:716:URI::Generic:-:       @port = v
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/test/test_helpper.rb:9:Object:-: 	res=nil
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/test/test_helpper.rb:10:Object:-: 	if proxy_addr
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/test/test_helpper.rb:11:Object:-: 		Net::HTTP.new(uri.host, uri.port, proxy_addr, proxy_port).start { |http|
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:569:#<Class:Net::HTTP>:-:       Proxy(p_addr, p_port, p_user, p_pass).newobj(address, port)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:884:#<Class:Net::HTTP>:-:       j_addr = ENV_JAVA['http.proxyHost']
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:885:#<Class:Net::HTTP>:-:       j_port = ENV_JAVA['http.proxyPort']
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:886:#<Class:Net::HTTP>:-:       p_addr = p_addr || j_addr
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:887:#<Class:Net::HTTP>:-:       p_port = p_port || j_port
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:888:#<Class:Net::HTTP>:-:       return self unless p_addr
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:889:#<Class:Net::HTTP>:-:       delta = ProxyDelta
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:890:#<Class:Net::HTTP>:-:       proxyclass = Class.new(self)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:891:#<Class:Net::HTTP>:-:       proxyclass.module_eval {
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:892:#<Class:Net::HTTP>:-:         include delta
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:894:#<Class:Net::HTTP>:-:         @is_proxy_class = true
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:895:#<Class:Net::HTTP>:-:         @proxy_address = p_addr
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:896:#<Class:Net::HTTP>:-:         @proxy_port    = p_port || default_port()
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:897:#<Class:Net::HTTP>:-:         @proxy_user    = p_user
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:898:#<Class:Net::HTTP>:-:         @proxy_pass    = p_pass
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:900:#<Class:Net::HTTP>:-:       proxyclass
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:576:Net::HTTP:-:       @address = address
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:577:Net::HTTP:-:       @port    = (port || HTTP.default_port)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:577:Net::HTTP:-:       @port    = (port || HTTP.default_port)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:578:Net::HTTP:-:       @curr_http_version = HTTPVersion
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:579:Net::HTTP:-:       @no_keepalive_server = false
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:580:Net::HTTP:-:       @close_on_empty_response = false
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:581:Net::HTTP:-:       @socket  = nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:582:Net::HTTP:-:       @started = false
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:583:Net::HTTP:-:       @open_timeout = nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:584:Net::HTTP:-:       @read_timeout = 60
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:585:Net::HTTP:-:       @continue_timeout = nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:586:Net::HTTP:-:       @debug_output = nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:587:Net::HTTP:-:       @use_ssl = false
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:588:Net::HTTP:-:       @ssl_context = nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:589:Net::HTTP:-:       @enable_post_connection_check = true
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:590:Net::HTTP:-:       @compression = nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:591:Net::HTTP:-:       @sspi_enabled = false
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:592:Net::HTTP:-:       if defined?(SSL_ATTRIBUTES)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:593:Net::HTTP:-:         SSL_ATTRIBUTES.each do |name|
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:594:Net::HTTP:-:           instance_variable_set "@#{name}", nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:741:Net::HTTP:-:       raise IOError, 'HTTP session already opened' if @started
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:742:Net::HTTP:-:       if block_given?
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:743:Net::HTTP:-:         begin
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:744:Net::HTTP:-:           do_start
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:755:Net::HTTP:-:       connect
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:761:Net::HTTP:-:       D "opening connection to #{conn_address()}..."
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:761:Net::HTTP:-:       D "opening connection to #{conn_address()}..."
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:971:Net::HTTP::ProxyDelta:-:         proxy_address()
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:930:Net::HTTP:-:       self.class.proxy_address
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1417:Net::HTTP:-:       return unless @debug_output
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:762:Net::HTTP:-:       s = timeout(@open_timeout) { TCPSocket.open(conn_address(), conn_port()) }
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:762:Net::HTTP:-:       s = timeout(@open_timeout) { TCPSocket.open(conn_address(), conn_port()) }
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:971:Net::HTTP::ProxyDelta:-:         proxy_address()
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:930:Net::HTTP:-:       self.class.proxy_address
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:975:Net::HTTP::ProxyDelta:-:         proxy_port()
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:935:Net::HTTP:-:       self.class.proxy_port
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:91:EventMachine::JEM:-:       s = String.from_java_bytes(a3.array[a3.position...a3.limit]) if a3
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:92:EventMachine::JEM:-:       EventMachine::event_callback a1, a2, s || a4
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1434:#<Class:EventMachine>:-:     if opcode == ConnectionUnbound
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1478:#<Class:EventMachine>:-:       t = @timers.delete( data )
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1479:#<Class:EventMachine>:-:       return if t == false # timer cancelled
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1480:#<Class:EventMachine>:-:       t or raise UnknownTimerFired, "timer data: #{data}"
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1481:#<Class:EventMachine>:-:       t.call
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:157:ProxyServer:-: 			@proxy=EventMachine::start_server(options[:host], options[:port], EventMachine::ProxyServer::Connection, options) do |c|
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:513:#<Class:EventMachine>:-:     begin
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:514:#<Class:EventMachine>:-:       port = Integer(port)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:523:#<Class:EventMachine>:-:     klass = klass_from_handler(Connection, handler, *args)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1511:#<Class:EventMachine>:-:     klass = if handler and handler.is_a?(Class)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1512:#<Class:EventMachine>:-:       raise ArgumentError, "must provide module or subclass of #{klass.name}" unless klass >= handler
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1513:#<Class:EventMachine>:-:       handler
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1524:#<Class:EventMachine>:-:     arity = klass.instance_method(:initialize).arity
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1525:#<Class:EventMachine>:-:     expected = arity >= 0 ? arity : -(arity + 1)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1526:#<Class:EventMachine>:-:     if (arity >= 0 and args.size != expected) or (arity < 0 and args.size < expected)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1526:#<Class:EventMachine>:-:     if (arity >= 0 and args.size != expected) or (arity < 0 and args.size < expected)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1526:#<Class:EventMachine>:-:     if (arity >= 0 and args.size != expected) or (arity < 0 and args.size < expected)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1530:#<Class:EventMachine>:-:     klass
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:525:#<Class:EventMachine>:-:     s = if port
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:526:#<Class:EventMachine>:-:           start_tcp_server server, port
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:117:#<Class:EventMachine>:-:     @em.startTcpServer server, port
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:530:#<Class:EventMachine>:-:     @acceptors[s] = [klass,args,block]
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:531:#<Class:EventMachine>:-:     s
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:160:ProxyServer:-: 			EventMachine.add_periodic_timer(10) {
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:347:#<Class:EventMachine>:-:     interval = args.shift
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:348:#<Class:EventMachine>:-:     code = args.shift || block
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:350:#<Class:EventMachine>:-:     EventMachine::PeriodicTimer.new(interval, code)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/timers.rb:33:EventMachine::PeriodicTimer:-:       @interval = interval
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/timers.rb:34:EventMachine::PeriodicTimer:-:       @code = callback || block
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/timers.rb:35:EventMachine::PeriodicTimer:-:       @cancelled = false
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/timers.rb:36:EventMachine::PeriodicTimer:-:       @work = method(:fire)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/timers.rb:37:EventMachine::PeriodicTimer:-:       schedule
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/timers.rb:50:EventMachine::PeriodicTimer:-:       EventMachine::add_timer @interval, @work
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:319:#<Class:EventMachine>:-:     interval = args.shift
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:320:#<Class:EventMachine>:-:     code = args.shift || block
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:321:#<Class:EventMachine>:-:     if code
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:323:#<Class:EventMachine>:-:       s = add_oneshot_timer((interval.to_f * 1000).to_i)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:323:#<Class:EventMachine>:-:       s = add_oneshot_timer((interval.to_f * 1000).to_i)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:108:#<Class:EventMachine>:-:     @em.installOneshotTimer interval
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:324:#<Class:EventMachine>:-:       @timers[s] = code
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:325:#<Class:EventMachine>:-:       s
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:93:EventMachine::JEM:-:       nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:763:Net::HTTP:-:       D "opened"
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1417:Net::HTTP:-:       return unless @debug_output
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:764:Net::HTTP:-:       if use_ssl?
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:662:Net::HTTP:-:       @use_ssl
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:779:Net::HTTP:-:       @socket = BufferedIO.new(s)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:51:Net::BufferedIO:-:       @io = io
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:91:EventMachine::JEM:-:       s = String.from_java_bytes(a3.array[a3.position...a3.limit]) if a3
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:52:Net::BufferedIO:-:       @read_timeout = 60
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:92:EventMachine::JEM:-:       EventMachine::event_callback a1, a2, s || a4
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:53:Net::BufferedIO:-:       @continue_timeout = nil
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1434:#<Class:EventMachine>:-:     if opcode == ConnectionUnbound
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:54:Net::BufferedIO:-:       @debug_output = nil
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1465:#<Class:EventMachine>:-:       accep,args,blk = @acceptors[conn_binding]
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:55:Net::BufferedIO:-:       @rbuf = ''
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1466:#<Class:EventMachine>:-:       raise NoHandlerForAcceptedConnection unless accep
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:780:Net::HTTP:-:       @socket.read_timeout = @read_timeout
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1467:#<Class:EventMachine>:-:       c = accep.new data, *args
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:781:Net::HTTP:-:       @socket.continue_timeout = @continue_timeout
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/connection.rb:49:#<Class:EventMachine::Connection>:-:       allocate.instance_eval do
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:782:Net::HTTP:-:       @socket.debug_output = @debug_output
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/connection.rb:51:#<Class:EventMachine::Connection>:-:         @signature = sig
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:783:Net::HTTP:-:       if use_ssl?
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/connection.rb:55:#<Class:EventMachine::Connection>:-:         initialize(*args)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:662:Net::HTTP:-:       @use_ssl
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:14:EventMachine::ProxyServer::Connection:-:         @debug = options[:debug] || false
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:809:Net::HTTP:-:       on_connect
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:15:EventMachine::ProxyServer::Connection:-:         @servers = {}
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:756:Net::HTTP:-:       @started = true
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/connection.rb:58:#<Class:EventMachine::Connection>:-:         post_init
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:745:Net::HTTP:-:           return yield(self)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/connection.rb:60:#<Class:EventMachine::Connection>:-:         self
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/test/test_helpper.rb:13:Object:-: 			res=http.get("#{uri.path}?#{uri.query}")
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1468:#<Class:EventMachine>:-:       @conns[data] = c
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/test/test_helpper.rb:13:Object:-: 			res=http.get("#{uri.path}?#{uri.query}")
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1469:#<Class:EventMachine>:-:       blk and blk.call(c)
#0:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/test/test_helpper.rb:13:Object:-: 			res=http.get("#{uri.path}?#{uri.query}")
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:158:ProxyServer:-: 				c.instance_eval(&blk)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1025:Net::HTTP:-:       res = nil
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:131:ProxyServer:-: 					server.run conn
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1026:Net::HTTP:-:       if HAVE_ZLIB
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:86:ProxyServer:-: 		if @config['forward_host']
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1027:Net::HTTP:-:         unless  initheader.keys.any?{|k| k.downcase == "accept-encoding"}
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:87:ProxyServer:-: 			conn.server :forward, :host =>@config['forward_host'], :port =>@config['forward_port']||80
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1028:Net::HTTP:-:           initheader = initheader.merge({
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:46:EventMachine::ProxyServer::Connection:-:         if opts[:socket]
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1031:Net::HTTP:-:           @compression = true
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:53:EventMachine::ProxyServer::Connection:-:           srv = EventMachine::bind_connect(opts[:bind_host], opts[:bind_port], opts[:host], opts[:port], EventMachine::ProxyServer::Backend, @debug) do |c|
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1034:Net::HTTP:-:       request(Get.new(path, initheader)) {|r|
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:648:#<Class:EventMachine>:-:     begin
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2101:Net::HTTPRequest:-:       super self.class::METHOD,
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:649:#<Class:EventMachine>:-:       port = Integer(port)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1864:Net::HTTPGenericRequest:-:       @method = m
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:658:#<Class:EventMachine>:-:     klass = klass_from_handler(Connection, handler, *args)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1865:Net::HTTPGenericRequest:-:       @request_has_body = reqbody
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1511:#<Class:EventMachine>:-:     klass = if handler and handler.is_a?(Class)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1866:Net::HTTPGenericRequest:-:       @response_has_body = resbody
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1512:#<Class:EventMachine>:-:       raise ArgumentError, "must provide module or subclass of #{klass.name}" unless klass >= handler
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1867:Net::HTTPGenericRequest:-:       raise ArgumentError, "no HTTP request path given" unless path
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1513:#<Class:EventMachine>:-:       handler
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1868:Net::HTTPGenericRequest:-:       raise ArgumentError, "HTTP request path is empty" if path.empty?
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1524:#<Class:EventMachine>:-:     arity = klass.instance_method(:initialize).arity
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1869:Net::HTTPGenericRequest:-:       @path = path
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1525:#<Class:EventMachine>:-:     expected = arity >= 0 ? arity : -(arity + 1)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1870:Net::HTTPGenericRequest:-:       initialize_http_header initheader
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1525:#<Class:EventMachine>:-:     expected = arity >= 0 ? arity : -(arity + 1)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1439:Net::HTTPHeader:-:       @header = {}
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1526:#<Class:EventMachine>:-:     if (arity >= 0 and args.size != expected) or (arity < 0 and args.size < expected)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1440:Net::HTTPHeader:-:       return unless initheader
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1526:#<Class:EventMachine>:-:     if (arity >= 0 and args.size != expected) or (arity < 0 and args.size < expected)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1441:Net::HTTPHeader:-:       initheader.each do |key, value|
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1526:#<Class:EventMachine>:-:     if (arity >= 0 and args.size != expected) or (arity < 0 and args.size < expected)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1442:Net::HTTPHeader:-:         warn "net/http: warning: duplicated HTTP header: #{key}" if key?(key) and $VERBOSE
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1530:#<Class:EventMachine>:-:     klass
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1571:Net::HTTPHeader:-:       @header.key?(key.downcase)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:660:#<Class:EventMachine>:-:     s = if port
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1443:Net::HTTPHeader:-:         @header[key.downcase] = [value.strip]
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:661:#<Class:EventMachine>:-:           if bind_addr
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1871:Net::HTTPGenericRequest:-:       self['Accept'] ||= '*/*'
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:664:#<Class:EventMachine>:-:             connect_server server, port
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1456:Net::HTTPHeader:-:       a = @header[key.downcase] or return nil
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:133:#<Class:EventMachine>:-:     bind_connect_server nil, nil, server, port
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1462:Net::HTTPHeader:-:       unless val
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:136:#<Class:EventMachine>:-:     @em.connectTcpServer bind_addr, bind_port.to_i, server, port
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1466:Net::HTTPHeader:-:       @header[key.downcase] = [val]
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1872:Net::HTTPGenericRequest:-:       self['User-Agent'] ||= 'Ruby'
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1456:Net::HTTPHeader:-:       a = @header[key.downcase] or return nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1462:Net::HTTPHeader:-:       unless val
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1466:Net::HTTPHeader:-:       @header[key.downcase] = [val]
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1873:Net::HTTPGenericRequest:-:       @body = nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1874:Net::HTTPGenericRequest:-:       @body_stream = nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1875:Net::HTTPGenericRequest:-:       @body_data = nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1291:Net::HTTP:-:       unless started?
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:653:Net::HTTP:-:       @started
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1297:Net::HTTP:-:       if proxy_user()
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:940:Net::HTTP:-:       self.class.proxy_user
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1300:Net::HTTP:-:       req.set_body_internal body
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1917:Net::HTTPGenericRequest:-:       raise ArgumentError, "both of body argument and HTTPRequest#body set" if str and (@body or @body_stream)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1918:Net::HTTPGenericRequest:-:       self.body = str if str
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1301:Net::HTTP:-:       res = transport_request(req, &block)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1323:Net::HTTP:-:       begin_transport req
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1343:Net::HTTP:-:       connect if @socket.closed?
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:72:Net::BufferedIO:-:       @io.closed?
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1344:Net::HTTP:-:       if not req.response_body_permitted? and @close_on_empty_response
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1890:Net::HTTPGenericRequest:-:       @response_has_body
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1347:Net::HTTP:-:       req['host'] ||= addr_port()
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1456:Net::HTTPHeader:-:       a = @header[key.downcase] or return nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1409:Net::HTTP:-:       if use_ssl?
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:662:Net::HTTP:-:       @use_ssl
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1412:Net::HTTP:-:         address() + (port == HTTP.http_default_port ? '' : ":#{port()}")
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1412:Net::HTTP:-:         address() + (port == HTTP.http_default_port ? '' : ":#{port()}")
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:498:#<Class:Net::HTTP>:-:       80
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1462:Net::HTTPHeader:-:       unless val
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:670:#<Class:EventMachine>:-:     c = klass.new s, *args
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1466:Net::HTTPHeader:-:       @header[key.downcase] = [val]
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/connection.rb:49:#<Class:EventMachine::Connection>:-:       allocate.instance_eval do
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1324:Net::HTTP:-:       res = catch(:response) {
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/connection.rb:51:#<Class:EventMachine::Connection>:-:         @signature = sig
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1325:Net::HTTP:-:         req.exec @socket, @curr_http_version, edit_path(req.path)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/connection.rb:55:#<Class:EventMachine::Connection>:-:         initialize(*args)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:979:Net::HTTP::ProxyDelta:-:         use_ssl? ? path : "http://#{addr_port()}#{path}"
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/backend.rb:7:EventMachine::ProxyServer::Backend:-:         @debug = debug
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:662:Net::HTTP:-:       @use_ssl
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/backend.rb:8:EventMachine::ProxyServer::Backend:-:         @connected = EM::DefaultDeferrable.new
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:979:Net::HTTP::ProxyDelta:-:         use_ssl? ? path : "http://#{addr_port()}#{path}"
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/connection.rb:58:#<Class:EventMachine::Connection>:-:         post_init
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1409:Net::HTTP:-:       if use_ssl?
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/connection.rb:60:#<Class:EventMachine::Connection>:-:         self
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:662:Net::HTTP:-:       @use_ssl
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:671:#<Class:EventMachine>:-:     @conns[s] = c
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1412:Net::HTTP:-:         address() + (port == HTTP.http_default_port ? '' : ":#{port()}")
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:672:#<Class:EventMachine>:-:     block_given? and yield c
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1412:Net::HTTP:-:         address() + (port == HTTP.http_default_port ? '' : ":#{port()}")
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:54:EventMachine::ProxyServer::Connection:-:             c.name = name
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:498:#<Class:Net::HTTP>:-:       80
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:55:EventMachine::ProxyServer::Connection:-:             c.plexer = self
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:979:Net::HTTP::ProxyDelta:-:         use_ssl? ? path : "http://#{addr_port()}#{path}"
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:56:EventMachine::ProxyServer::Connection:-:             c.proxy_incoming_to(self, 10240) if opts[:relay_server]
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1926:Net::HTTPGenericRequest:-:       if @body
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:673:#<Class:EventMachine>:-:     c
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1933:Net::HTTPGenericRequest:-:         write_header sock, ver, path
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:60:EventMachine::ProxyServer::Connection:-:         self.proxy_incoming_to(srv, 10240) if opts[:relay_client]
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2080:Net::HTTPGenericRequest:-:       buf = "#{@method} #{path} HTTP/#{ver}\r\n"
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:62:EventMachine::ProxyServer::Connection:-:         @servers[name] = srv
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2080:Net::HTTPGenericRequest:-:       buf = "#{@method} #{path} HTTP/#{ver}\r\n"
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:94:ProxyServer:-: 		conn.on_data do |raw_req|
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2080:Net::HTTPGenericRequest:-:       buf = "#{@method} #{path} HTTP/#{ver}\r\n"
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:7:EventMachine::ProxyServer::Connection:-:       def on_data(&blk); @on_data = blk; end
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2080:Net::HTTPGenericRequest:-:       buf = "#{@method} #{path} HTTP/#{ver}\r\n"
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:105:ProxyServer:-: 		conn.on_response do |backend, raw_res|
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2081:Net::HTTPGenericRequest:-:       each_capitalized do |k,v|
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:8:EventMachine::ProxyServer::Connection:-:       def on_response(&blk); @on_response = blk; end
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1589:Net::HTTPHeader:-:       block_given? or return enum_for(__method__)
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:119:ProxyServer:-: 		conn.on_finish do |backend, name|
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1590:Net::HTTPHeader:-:       @header.each do |k,v|
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:9:EventMachine::ProxyServer::Connection:-:       def on_finish(&blk); @on_finish = blk; end
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1591:Net::HTTPHeader:-:         yield capitalize(k), v.join(', ')
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1470:#<Class:EventMachine>:-:       c # (needed?)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1598:Net::HTTPHeader:-:       name.split(/-/).map {|s| s.capitalize }.join('-')
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:93:EventMachine::JEM:-:       nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1598:Net::HTTPHeader:-:       name.split(/-/).map {|s| s.capitalize }.join('-')
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1598:Net::HTTPHeader:-:       name.split(/-/).map {|s| s.capitalize }.join('-')
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2082:Net::HTTPGenericRequest:-:         buf << "#{k}: #{v}\r\n"
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:91:EventMachine::JEM:-:       s = String.from_java_bytes(a3.array[a3.position...a3.limit]) if a3
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2082:Net::HTTPGenericRequest:-:         buf << "#{k}: #{v}\r\n"
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:92:EventMachine::JEM:-:       EventMachine::event_callback a1, a2, s || a4
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2082:Net::HTTPGenericRequest:-:         buf << "#{k}: #{v}\r\n"
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1434:#<Class:EventMachine>:-:     if opcode == ConnectionUnbound
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1591:Net::HTTPHeader:-:         yield capitalize(k), v.join(', ')
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1475:#<Class:EventMachine>:-:       c = @conns[conn_binding] or raise ConnectionNotBound, "received ConnectionCompleted for unknown signature: #{conn_binding}"
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1598:Net::HTTPHeader:-:       name.split(/-/).map {|s| s.capitalize }.join('-')
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1476:#<Class:EventMachine>:-:       c.connection_completed
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1598:Net::HTTPHeader:-:       name.split(/-/).map {|s| s.capitalize }.join('-')
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/backend.rb:12:EventMachine::ProxyServer::Backend:-:         debug [@name, :conn_complete]
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2082:Net::HTTPGenericRequest:-:         buf << "#{k}: #{v}\r\n"
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/backend.rb:38:EventMachine::ProxyServer::Backend:-:         return unless @debug
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2082:Net::HTTPGenericRequest:-:         buf << "#{k}: #{v}\r\n"
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/backend.rb:13:EventMachine::ProxyServer::Backend:-:         @plexer.connected(@name)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2082:Net::HTTPGenericRequest:-:         buf << "#{k}: #{v}\r\n"
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:96:EventMachine::ProxyServer::Connection:-:         debug [:connected]
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1591:Net::HTTPHeader:-:         yield capitalize(k), v.join(', ')
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:127:EventMachine::ProxyServer::Connection:-:         if @debug
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1598:Net::HTTPHeader:-:       name.split(/-/).map {|s| s.capitalize }.join('-')
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:97:EventMachine::ProxyServer::Connection:-:         @on_connect.call(name) if @on_connect
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1598:Net::HTTPHeader:-:       name.split(/-/).map {|s| s.capitalize }.join('-')
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/backend.rb:14:EventMachine::ProxyServer::Backend:-:         @connected.succeed
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1598:Net::HTTPHeader:-:       name.split(/-/).map {|s| s.capitalize }.join('-')
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/deferrable.rb:191:EventMachine::Deferrable:-:       set_deferred_status :succeeded, *args
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2082:Net::HTTPGenericRequest:-:         buf << "#{k}: #{v}\r\n"
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/deferrable.rb:142:EventMachine::Deferrable:-:       cancel_timeout
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2082:Net::HTTPGenericRequest:-:         buf << "#{k}: #{v}\r\n"
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/deferrable.rb:180:EventMachine::Deferrable:-:       @deferred_timeout ||= nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2082:Net::HTTPGenericRequest:-:         buf << "#{k}: #{v}\r\n"
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/deferrable.rb:181:EventMachine::Deferrable:-:       if @deferred_timeout
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1591:Net::HTTPHeader:-:         yield capitalize(k), v.join(', ')
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/deferrable.rb:143:EventMachine::Deferrable:-:       @errbacks ||= nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1598:Net::HTTPHeader:-:       name.split(/-/).map {|s| s.capitalize }.join('-')
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/deferrable.rb:144:EventMachine::Deferrable:-:       @callbacks ||= nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1598:Net::HTTPHeader:-:       name.split(/-/).map {|s| s.capitalize }.join('-')
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/deferrable.rb:145:EventMachine::Deferrable:-:       @deferred_status = status
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2082:Net::HTTPGenericRequest:-:         buf << "#{k}: #{v}\r\n"
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/deferrable.rb:146:EventMachine::Deferrable:-:       @deferred_args = args
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2082:Net::HTTPGenericRequest:-:         buf << "#{k}: #{v}\r\n"
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/deferrable.rb:147:EventMachine::Deferrable:-:       case @deferred_status
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2082:Net::HTTPGenericRequest:-:         buf << "#{k}: #{v}\r\n"
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/deferrable.rb:148:EventMachine::Deferrable:-:       when :succeeded
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2084:Net::HTTPGenericRequest:-:       buf << "\r\n"
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/deferrable.rb:149:EventMachine::Deferrable:-:         if @callbacks
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2085:Net::HTTPGenericRequest:-:       sock.write buf
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/deferrable.rb:154:EventMachine::Deferrable:-:         @errbacks.clear if @errbacks
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:158:Net::BufferedIO:-:       writing {
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:93:EventMachine::JEM:-:       nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:174:Net::BufferedIO:-:       @written_bytes = 0
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:175:Net::BufferedIO:-:       @debug_output << '<- ' if @debug_output
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:176:Net::BufferedIO:-:       yield
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:159:Net::BufferedIO:-:         write0 str
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:184:Net::BufferedIO:-:       @debug_output << str.dump if @debug_output
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:185:Net::BufferedIO:-:       len = @io.write(str)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:186:Net::BufferedIO:-:       @written_bytes += len
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:187:Net::BufferedIO:-:       len
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:177:Net::BufferedIO:-:       @debug_output << "\n" if @debug_output
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:178:Net::BufferedIO:-:       bytes = @written_bytes
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:179:Net::BufferedIO:-:       @written_bytes = nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:180:Net::BufferedIO:-:       bytes
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:91:EventMachine::JEM:-:       s = String.from_java_bytes(a3.array[a3.position...a3.limit]) if a3
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1326:Net::HTTP:-:         begin
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1327:Net::HTTP:-:           res = HTTPResponse.read_new(@socket)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2559:#<Class:Net::HTTPResponse>:-:         httpv, code, msg = read_status_line(sock)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:2570:#<Class:Net::HTTPResponse>:-:         str = sock.readline
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:92:EventMachine::JEM:-:       EventMachine::event_callback a1, a2, s || a4
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:132:Net::BufferedIO:-:       readuntil("\n").chop
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1434:#<Class:EventMachine>:-:     if opcode == ConnectionUnbound
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:120:Net::BufferedIO:-:       begin
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1483:#<Class:EventMachine>:-:       c = @conns[conn_binding] or raise ConnectionNotBound, "received data #{data} for unknown signature: #{conn_binding}"
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:121:Net::BufferedIO:-:         until idx = @rbuf.index(terminator)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1484:#<Class:EventMachine>:-:       c.receive_data data
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:122:Net::BufferedIO:-:           rbuf_fill
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:19:EventMachine::ProxyServer::Connection:-:         debug [:connection, data]
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:140:Net::BufferedIO:-:       Timeout.timeout(@read_timeout) do
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:127:EventMachine::ProxyServer::Connection:-:         if @debug
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:20:EventMachine::ProxyServer::Connection:-:         processed = @on_data.call(data) if @on_data
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:95:ProxyServer:-:       p 'self'
"self"
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:96:ProxyServer:-:       p self
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:141:Net::BufferedIO:-:         @rbuf << @io.sysread(BUFSIZE)
#<HttpProxy:0xfe9ad1 @request=#<ProxyRequest:0x143c423 @data="", @raw="">, @http=#<Http::NativeParser:0x1ff83 @options={:max_header_length=>10240, :max_headers=>100, :min_tempfile_size=>1048576, :tempfile_class=>Tempfile}, @body=nil, @method=nil, @path=nil, @headers={}, @state=:request_line, @version=nil>, @raw_req=nil, @proxy=2, @mocks=[], @config={"host"=>"0.0.0.0", "port"=>8078, "forward_host"=>"www.baidu.com", "forward_port"=>80}, @response=#<ProxyResponse:0x7a9c0f @data="", @raw="">, @stub=nil, @raw_res=nil, @thread=#<Thread:0x19bc716 run>>
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:97:ProxyServer:-:       @request.raw=raw_req
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:98:ProxyServer:-: 			self.decode_req(@request)
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/http_proxy.rb:16:HttpProxy:-:     req.data=req.raw
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:99:ProxyServer:-: 			self.encode_req(@request)
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:65:ProxyServer:-:     req.raw=req.data
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:100:ProxyServer:-:       p @request
#<ProxyRequest:0x143c423 @data="GET http://www.sogou.com/? HTTP/1.1\r\nAccept-Encoding: gzip;q=1.0,deflate;q=0.6,identity;q=0.3\r\nAccept: */*\r\nUser-Agent: Ruby\r\nHost: www.sogou.com\r\n\r\n", @raw="GET http://www.sogou.com/? HTTP/1.1\r\nAccept-Encoding: gzip;q=1.0,deflate;q=0.6,identity;q=0.3\r\nAccept: */*\r\nUser-Agent: Ruby\r\nHost: www.sogou.com\r\n\r\n">
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:102:ProxyServer:-:       @request.raw
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:22:EventMachine::ProxyServer::Connection:-:         return if processed == :async or processed.nil?
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:23:EventMachine::ProxyServer::Connection:-:         relay_to_servers(processed)
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:27:EventMachine::ProxyServer::Connection:-:         if processed.is_a? Array
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:33:EventMachine::ProxyServer::Connection:-:           data = processed
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:34:EventMachine::ProxyServer::Connection:-:           servers ||= @servers.values.compact
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:37:EventMachine::ProxyServer::Connection:-:         servers.each do |s|
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:38:EventMachine::ProxyServer::Connection:-:           s.send_data data unless data.nil?
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/connection.rb:325:EventMachine::Connection:-:       data = data.to_s
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/connection.rb:326:EventMachine::Connection:-:       size = data.bytesize if data.respond_to?(:bytesize)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/connection.rb:327:EventMachine::Connection:-:       size ||= data.size
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/connection.rb:328:EventMachine::Connection:-:       EventMachine::send_data @signature, data, size
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:127:#<Class:EventMachine>:-:     @em.sendData sig, data.to_java_bytes
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:93:EventMachine::JEM:-:       nil
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:91:EventMachine::JEM:-:       s = String.from_java_bytes(a3.array[a3.position...a3.limit]) if a3
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:92:EventMachine::JEM:-:       EventMachine::event_callback a1, a2, s || a4
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1434:#<Class:EventMachine>:-:     if opcode == ConnectionUnbound
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1435:#<Class:EventMachine>:-:       if c = @conns.delete( conn_binding )
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1436:#<Class:EventMachine>:-:         begin
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1437:#<Class:EventMachine>:-:           if c.original_method(:unbind).arity != 0
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1440:#<Class:EventMachine>:-:             c.unbind
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/backend.rb:31:EventMachine::ProxyServer::Backend:-:         debug [@name, :unbind]
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/backend.rb:38:EventMachine::ProxyServer::Backend:-:         return unless @debug
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/backend.rb:32:EventMachine::ProxyServer::Backend:-:         @plexer.unbind_backend(@name)
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:110:EventMachine::ProxyServer::Connection:-:         debug [:unbind_backend, name]
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:127:EventMachine::ProxyServer::Connection:-:         if @debug
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:111:EventMachine::ProxyServer::Connection:-:         @servers[name] = nil
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:112:EventMachine::ProxyServer::Connection:-:         close = :close
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:114:EventMachine::ProxyServer::Connection:-:         if @on_finish
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:115:EventMachine::ProxyServer::Connection:-:           close = @on_finish.call(name)
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:119:EventMachine::ProxyServer::Connection:-:         if (@servers.values.compact.size.zero? && close != :keep) || (close == :close)
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:119:EventMachine::ProxyServer::Connection:-:         if (@servers.values.compact.size.zero? && close != :keep) || (close == :close)
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:120:EventMachine::ProxyServer::Connection:-:           close_connection_after_writing
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/em/connection.rb:303:EventMachine::Connection:-:       close_connection true
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:12:EventMachine::Connection:-: 			EM.next_tick do
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1086:#<Class:EventMachine>:-:     raise ArgumentError, "no proc or block given" unless ((pr && pr.respond_to?(:call)) or block)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1086:#<Class:EventMachine>:-:     raise ArgumentError, "no proc or block given" unless ((pr && pr.respond_to?(:call)) or block)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1086:#<Class:EventMachine>:-:     raise ArgumentError, "no proc or block given" unless ((pr && pr.respond_to?(:call)) or block)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1087:#<Class:EventMachine>:-:     @next_tick_mutex.synchronize do
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1088:#<Class:EventMachine>:-:       @next_tick_queue << ( pr || block )
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1088:#<Class:EventMachine>:-:       @next_tick_queue << ( pr || block )
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1090:#<Class:EventMachine>:-:     signal_loopbreak if reactor_running?
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1184:#<Class:EventMachine>:-:     (@reactor_running || false)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:155:#<Class:EventMachine>:-:     @em.signalLoopbreak
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1443:#<Class:EventMachine>:-:           if c.instance_variable_defined?(:@io) and !c.instance_variable_get(:@watch_mode)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:93:EventMachine::JEM:-:       nil
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:91:EventMachine::JEM:-:       s = String.from_java_bytes(a3.array[a3.position...a3.limit]) if a3
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:92:EventMachine::JEM:-:       EventMachine::event_callback a1, a2, s || a4
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1434:#<Class:EventMachine>:-:     if opcode == ConnectionUnbound
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1486:#<Class:EventMachine>:-:       run_deferred_callbacks
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:949:#<Class:EventMachine>:-:     until (@resultqueue ||= []).empty?
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:949:#<Class:EventMachine>:-:     until (@resultqueue ||= []).empty?
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:955:#<Class:EventMachine>:-:     size = @next_tick_mutex.synchronize { @next_tick_queue.size }
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:955:#<Class:EventMachine>:-:     size = @next_tick_mutex.synchronize { @next_tick_queue.size }
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:956:#<Class:EventMachine>:-:     size.times do |i|
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:957:#<Class:EventMachine>:-:       callback = @next_tick_mutex.synchronize { @next_tick_queue.shift }
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:957:#<Class:EventMachine>:-:       callback = @next_tick_mutex.synchronize { @next_tick_queue.shift }
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:958:#<Class:EventMachine>:-:       begin
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:959:#<Class:EventMachine>:-:         callback.call
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/proxyserver.rb:13:EventMachine::Connection:-: 				EventMachine::close_connection @signature, after_writing
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:139:#<Class:EventMachine>:-:     @em.closeConnection sig, after_writing
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:966:#<Class:EventMachine>:-:         EM.next_tick {} if $!
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:93:EventMachine::JEM:-:       nil
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:91:EventMachine::JEM:-:       s = String.from_java_bytes(a3.array[a3.position...a3.limit]) if a3
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:92:EventMachine::JEM:-:       EventMachine::event_callback a1, a2, s || a4
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1434:#<Class:EventMachine>:-:     if opcode == ConnectionUnbound
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1435:#<Class:EventMachine>:-:       if c = @conns.delete( conn_binding )
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1436:#<Class:EventMachine>:-:         begin
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1437:#<Class:EventMachine>:-:           if c.original_method(:unbind).arity != 0
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1440:#<Class:EventMachine>:-:             c.unbind
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:101:EventMachine::ProxyServer::Connection:-:         debug [:unbind, :connection]
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:127:EventMachine::ProxyServer::Connection:-:         if @debug
#1:d:/seven/Dropbox/sihanjishu/PeckerTesting/testing-search/iso8583/proxyserver/lib/proxyserver/connection.rb:104:EventMachine::ProxyServer::Connection:-:         @servers.values.compact.each do |s|
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/eventmachine.rb:1443:#<Class:EventMachine>:-:           if c.instance_variable_defined?(:@io) and !c.instance_variable_get(:@watch_mode)
#1:c:/jruby-1.7.3/lib/ruby/gems/shared/gems/eventmachine-1.0.3-java/lib/jeventmachine.rb:93:EventMachine::JEM:-:       nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:141:Net::BufferedIO:^:         @rbuf << @io.sysread(BUFSIZE)
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:126:Net::BufferedIO:-:         raise unless ignore_eof
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:126:Kernel:^:         raise unless ignore_eof
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1337:Net::HTTP:-:       D "Conn close because of error #{exception}"
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1337:Net::HTTP:-:       D "Conn close because of error #{exception}"
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1417:Net::HTTP:-:       return unless @debug_output
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1338:Net::HTTP:-:       @socket.close if @socket and not @socket.closed?
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:72:Net::BufferedIO:-:       @io.closed?
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:76:Net::BufferedIO:-:       @io.close
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1339:Net::HTTP:-:       raise exception
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:1339:Kernel:^:       raise exception
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:747:Net::HTTP:-:           do_finish
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:825:Net::HTTP:-:       @started = false
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:826:Net::HTTP:-:       @socket.close if @socket and not @socket.closed?
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/protocol.rb:72:Net::BufferedIO:-:       @io.closed?
#0:c:/jruby-1.7.3/lib/ruby/1.9/net/http.rb:827:Net::HTTP:-:       @socket = nil
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:955:MiniTest::Unit::TestCase:-:           @passed = false
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:956:MiniTest::Unit::TestCase:-:           result = runner.puke self.class, self.__name__, e
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:581:Test::Unit::Runner:-:         e = case e
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:582:Test::Unit::Runner:-:             when MiniTest::Skip then
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:585:Test::Unit::Runner:-:             when MiniTest::Assertion then
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:589:Test::Unit::Runner:-:               @errors += 1
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:590:Test::Unit::Runner:-:               bt = MiniTest::filter_backtrace(e.backtrace).join "\n    "
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:44:#<Class:MiniTest>:-:     return ["No backtrace"] unless bt
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:46:#<Class:MiniTest>:-:     new_bt = []
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:48:#<Class:MiniTest>:-:     unless $DEBUG then
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:49:#<Class:MiniTest>:-:       bt.each do |line|
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:50:#<Class:MiniTest>:-:         break if line.rindex MINI_DIR, 0
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:51:#<Class:MiniTest>:-:         new_bt << line
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:50:#<Class:MiniTest>:-:         break if line.rindex MINI_DIR, 0
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:54:#<Class:MiniTest>:-:       new_bt = bt.reject { |line| line.rindex MINI_DIR, 0 } if new_bt.empty?
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:55:#<Class:MiniTest>:-:       new_bt = bt.dup if new_bt.empty?
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:60:#<Class:MiniTest>:-:     new_bt
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:591:Test::Unit::Runner:-:               "Error:\n#{meth}(#{klass}):\n#{e.class}: #{e.message}\n    #{bt}\n"
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:591:Test::Unit::Runner:-:               "Error:\n#{meth}(#{klass}):\n#{e.class}: #{e.message}\n    #{bt}\n"
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:591:Test::Unit::Runner:-:               "Error:\n#{meth}(#{klass}):\n#{e.class}: #{e.message}\n    #{bt}\n"
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:591:Test::Unit::Runner:-:               "Error:\n#{meth}(#{klass}):\n#{e.class}: #{e.message}\n    #{bt}\n"
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:591:Test::Unit::Runner:-:               "Error:\n#{meth}(#{klass}):\n#{e.class}: #{e.message}\n    #{bt}\n"
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:591:Test::Unit::Runner:-:               "Error:\n#{meth}(#{klass}):\n#{e.class}: #{e.message}\n    #{bt}\n"
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:593:Test::Unit::Runner:-:         @report << e
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:594:Test::Unit::Runner:-:         e[0, 1]
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:958:MiniTest::Unit::TestCase:-:           begin
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:959:MiniTest::Unit::TestCase:-:             self.run_teardown_hooks
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:1144:MiniTest::Unit::TestCase:-:         self.class.teardown_hooks.reverse.each do |hook|
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:1136:#<Class:MiniTest::Unit::TestCase>:-:         if superclass.respond_to? :teardown_hooks then
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:1137:#<Class:MiniTest::Unit::TestCase>:-:           superclass.teardown_hooks
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:1136:#<Class:MiniTest::Unit::TestCase>:-:         if superclass.respond_to? :teardown_hooks then
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:1137:#<Class:MiniTest::Unit::TestCase>:-:           superclass.teardown_hooks
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:1136:#<Class:MiniTest::Unit::TestCase>:-:         if superclass.respond_to? :teardown_hooks then
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:1139:#<Class:MiniTest::Unit::TestCase>:-:           []
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:960:MiniTest::Unit::TestCase:-:             self.teardown
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:966:MiniTest::Unit::TestCase:-:           trap 'INFO', 'DEFAULT' if SUPPORTS_INFO_SIGNAL
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:968:MiniTest::Unit::TestCase:-:         result
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:788:MiniTest::Unit:-:         time = Time.now - @start_time
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:790:MiniTest::Unit:-:         print "%.2f s = " % time if @verbose
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:791:MiniTest::Unit:-:         print result
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:729:MiniTest::Unit:-:       output.print(*a)
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:721:MiniTest::Unit:-:       self.class.output
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:673:#<Class:MiniTest::Unit>:-:       @@out
E#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:792:MiniTest::Unit:-:         puts if @verbose
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:794:MiniTest::Unit:-:         inst._assertions
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:174:MiniTest::Assertions:-:       @_assertions ||= 0
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:797:MiniTest::Unit:-:       return assertions.size, assertions.inject(0) { |sum, n| sum + n }
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:797:MiniTest::Unit:-:       return assertions.size, assertions.inject(0) { |sum, n| sum + n }
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:572:Test::Unit::Runner:-:         report.reject!{|r| r.start_with? "Skipped:" } if @options[:hide_skip]
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:573:Test::Unit::Runner:-:         result
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:748:MiniTest::Unit:-:       @test_count      = results.inject(0) { |sum, (tc, _)| sum + tc }
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:748:MiniTest::Unit:-:       @test_count      = results.inject(0) { |sum, (tc, _)| sum + tc }
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:748:MiniTest::Unit:-:       @test_count      = results.inject(0) { |sum, (tc, _)| sum + tc }
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:749:MiniTest::Unit:-:       @assertion_count = results.inject(0) { |sum, (_, ac)| sum + ac }
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:749:MiniTest::Unit:-:       @assertion_count = results.inject(0) { |sum, (_, ac)| sum + ac }
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:749:MiniTest::Unit:-:       @assertion_count = results.inject(0) { |sum, (_, ac)| sum + ac }
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:751:MiniTest::Unit:-:       output.sync = old_sync if sync
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:721:MiniTest::Unit:-:       self.class.output
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:673:#<Class:MiniTest::Unit>:-:       @@out
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:753:MiniTest::Unit:-:       t = Time.now - start
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:755:MiniTest::Unit:-:       puts
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:725:MiniTest::Unit:-:       output.puts(*a)
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:721:MiniTest::Unit:-:       self.class.output
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:673:#<Class:MiniTest::Unit>:-:       @@out

#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:756:MiniTest::Unit:-:       puts
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:725:MiniTest::Unit:-:       output.puts(*a)
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:721:MiniTest::Unit:-:       self.class.output
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:673:#<Class:MiniTest::Unit>:-:       @@out

#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:757:MiniTest::Unit:-:       puts "Finished #{type}s in %.6fs, %.4f tests/s, %.4f assertions/s." %
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:757:MiniTest::Unit:-:       puts "Finished #{type}s in %.6fs, %.4f tests/s, %.4f assertions/s." %
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:725:MiniTest::Unit:-:       output.puts(*a)
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:721:MiniTest::Unit:-:       self.class.output
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:673:#<Class:MiniTest::Unit>:-:       @@out
Finished tests in 0.750000s, 1.3333 tests/s, 0.0000 assertions/s.
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:760:MiniTest::Unit:-:       report.each_with_index do |msg, i|
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:761:MiniTest::Unit:-:         puts "\n%3d) %s" % [i + 1, msg]
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:725:MiniTest::Unit:-:       output.puts(*a)
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:721:MiniTest::Unit:-:       self.class.output
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:673:#<Class:MiniTest::Unit>:-:       @@out

  1) Error:
test_http(TestHttp):
EOFError: End of file reached
    org/jruby/RubyIO.java:2836:in `sysread'
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:764:MiniTest::Unit:-:       puts
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:725:MiniTest::Unit:-:       output.puts(*a)
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:721:MiniTest::Unit:-:       self.class.output
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:673:#<Class:MiniTest::Unit>:-:       @@out

#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:766:MiniTest::Unit:-:       status
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:598:Test::Unit::Runner:-:         result = super
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:721:MiniTest::Unit:-:       self.class.output
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:673:#<Class:MiniTest::Unit>:-:       @@out
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:916:MiniTest::Unit:-:       format = "%d tests, %d assertions, %d failures, %d errors, %d skips"
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:917:MiniTest::Unit:-:       io.puts format % [test_count, assertion_count, failures, errors, skips]
1 tests, 0 assertions, 0 failures, 1 errors, 0 skips
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:599:Test::Unit::Runner:-:         raise @interrupt if @interrupt
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:600:Test::Unit::Runner:-:         result
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:897:MiniTest::Unit:-:         break unless report.empty?
#0:c:/jruby-1.7.3/lib/ruby/1.9/minitest/unit.rb:900:MiniTest::Unit:-:       return failures + errors if @test_count > 0 # or return nil...
#0:c:/jruby-1.7.3/lib/ruby/1.9/test/unit.rb:326:#<Class:Test::Unit::Runner>:^:             exit(Test::Unit::Runner.new.run(ARGV) || true)
#2::1::^: -
